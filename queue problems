Write a program to print binary numbers from 1 to 10 using Queue. Use Queue class implemented in main tutorial. Binary sequence should look like,
    1
    10
    11
    100
    101
    110
    111
    1000
    1001
    1010
Hint: Notice a pattern above. After 1 second and third number is 1+0 and 1+1. 4th and 5th number are second number (i.e. 10) + 0 and second number (i.e. 10) + 1.

You also need to add front() function in queue class that can return the front element in the queue.

'''''''''''''''''''''''''''''''''''''

##Queue 
class queue():
    def __init__(self):
        self.items=[]
        
    def is_empty(self):
        return self.items==[]
        
    def enqueue(self,index,value):
        self.items.insert(index,value)
        
    def dequeue(self):
        return self.items.pop()
        
    def front(self):
        return self.items[0]
        
    def end(self):
        return self.items[-1]
        
    def size(self):
        return len(self.items)
        
    def show(self):
        return self.items 
    
    def binary(self,value):
        return str(bin((value)))
        
q=queue()
for i in range(1,11):
    q.enqueue(i-1,(q.binary((i))))
   # print(q.show())
    print(str(q.dequeue())[2:])
    

'''
##################################################
For all exercises use Queue class implemented in main tutorial.

Design a food ordering system where your python program will run two threads,

Place Order: This thread will be placing an order and inserting that into a queue. This thread places new order every 0.5 second. (hint: use time.sleep(0.5) function)
Serve Order: This thread will server the order. All you need to do is pop the order out of the queue and print it. This thread serves an order every 2 seconds. Also start this thread 1 second after place order thread is started.
Use this video to get yourself familiar with multithreading in python

Pass following list as an argument to place order thread,

orders = ['pizza','samosa','pasta','biryani','burger']
This problem is a producer,consumer problem where place_order thread is producing orders whereas server_order thread is consuming the food orders. Use Queue class implemented in a video tutorial.


'''
import threading

import time

class queue():
    def __init__(self):
        self.items=[]
        
    def show(self):
        return self.items 
        
    def size(self):
        return len(self.items)
        
    def enqueue(self,index,value):
        self.items.insert(index,value)
        
    def dequeue(self):
        self.items.pop()
        
    def front(self):
        return self.items[0]
        
    def rear(self):
        return self.items[-1]
        

        
q=queue()
orders = ['pizza','samosa','pasta','biryani','burger']
q.enqueue(0,orders)
print(q.show())

def place_orders(orders):
    for order in orders:
        print("Place {0} for order".format(order))
        q.enqueue(0,order)
        time.sleep(0.5)
        
def serve_order():
    time.sleep(1)
    while True:
        serve=q.dequeue()
        print("Serving {0}".format(serve))
        time.sleep(2)
        
orders = ['pizza','samosa','pasta','biryani','burger']
t1=threading.Thread(target=place_orders,args=(orders,))
t2=threading.Thread(target=serve_order)
t1.start()
t2.start()
    
    '''
